// Code generated by MockGen. DO NOT EDIT.
// Source: cache/category_cache.go

// Package cache_mocks is a generated GoMock package.
package cache_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/guntoroyk/golang-restful-api/model/domain"
)

// MockCategoryCache is a mock of CategoryCache interface.
type MockCategoryCache struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryCacheMockRecorder
}

// MockCategoryCacheMockRecorder is the mock recorder for MockCategoryCache.
type MockCategoryCacheMockRecorder struct {
	mock *MockCategoryCache
}

// NewMockCategoryCache creates a new mock instance.
func NewMockCategoryCache(ctrl *gomock.Controller) *MockCategoryCache {
	mock := &MockCategoryCache{ctrl: ctrl}
	mock.recorder = &MockCategoryCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryCache) EXPECT() *MockCategoryCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCategoryCache) Delete(ctx context.Context, category domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryCacheMockRecorder) Delete(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryCache)(nil).Delete), ctx, category)
}

// GetCategory mocks base method.
func (m *MockCategoryCache) GetCategory(ctx context.Context, categoryId int) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, categoryId)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockCategoryCacheMockRecorder) GetCategory(ctx, categoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoryCache)(nil).GetCategory), ctx, categoryId)
}

// GetCategoryBatch mocks base method.
func (m *MockCategoryCache) GetCategoryBatch(ctx context.Context) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryBatch", ctx)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryBatch indicates an expected call of GetCategoryBatch.
func (mr *MockCategoryCacheMockRecorder) GetCategoryBatch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryBatch", reflect.TypeOf((*MockCategoryCache)(nil).GetCategoryBatch), ctx)
}

// SetCategory mocks base method.
func (m *MockCategoryCache) SetCategory(ctx context.Context, category domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCategory", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCategory indicates an expected call of SetCategory.
func (mr *MockCategoryCacheMockRecorder) SetCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCategory", reflect.TypeOf((*MockCategoryCache)(nil).SetCategory), ctx, category)
}

// SetCategoryBatch mocks base method.
func (m *MockCategoryCache) SetCategoryBatch(ctx context.Context, categories []domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCategoryBatch", ctx, categories)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCategoryBatch indicates an expected call of SetCategoryBatch.
func (mr *MockCategoryCacheMockRecorder) SetCategoryBatch(ctx, categories interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCategoryBatch", reflect.TypeOf((*MockCategoryCache)(nil).SetCategoryBatch), ctx, categories)
}
